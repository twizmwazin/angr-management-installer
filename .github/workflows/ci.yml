name:

on:
  push:


jobs:
  linux-build:
    runs-on: ubuntu-18.04

    steps:
    - run: sudo apt install -y zstd
      name: Install dependencies
    - uses: actions/checkout@v3
    - run: ./linux/build_installer.sh
      name: Build installer
    - uses: actions/upload-artifact@v3
      with:
        name: angr-management-linux
        path: ./linux/angr-management-installer-linux.tar.gz

  linux-test:
    strategy:
      matrix:
        version:
        - "18.04"
        - "20.04"
        - "22.04"
    runs-on: ubuntu-${{ matrix.version }}
    needs: linux-build

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: angr-management-linux
        path: artifact

    - run: sudo apt-get install -y xvfb x11-utils libqt5gui5
      name: Install GUI testing libraries
    - run: tar xvf ./artifact/angr-management-installer-linux.tar.gz
      name: Extract installer
    - run: ./angr-management-install/install.sh
      name: Run installer
    - run: |
        xvfb-run bash -c '
          ~/.angr-management/python/install/bin/angr-management &
          sleep 10 && output=$(xwininfo -tree -root)
          [[ "$output" == *"angr management"* ]] || exit 1
        '
      name: Test angr management start

  macos-build:
    runs-on: macos-11

    steps:
    - uses: actions/checkout@v3
    - run: ./macos/build_installer.sh
      name: Build installer
    - uses: actions/upload-artifact@v3
      with:
        name: angr-management-macos
        path: ./macos/angr-management-installer-macos.tar.gz

  linux-test:
    strategy:
      matrix:
        version:
        - "11"
        - "12"
    runs-on: macos-${{ matrix.version }}
    needs: macos-build

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: angr-management-macos
        path: artifact

    - run: tar xvf ./artifact/angr-management-installer-macos.tar.gz
      name: Extract installer
    - run: ./angr-management-install/install.sh
      name: Run installer
    - run: |
        ~/.angr-management/python/install/bin/angr-management &
        sleep 10 && output=$(osascript -e '
          tell application "System Events" to get every window of every process
        ')
        [[ "$output" == *"angr management"* ]] || exit 1
      name: Test angr management start
